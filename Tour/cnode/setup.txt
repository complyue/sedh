
# allocate nfs shared ZFS volumes from NAS 
zfs create -o mountpoint=/cnroot -o sharenfs=root=@10.0.0.0/8 -o quota=20G -o reservation=10G zones/cnroot
zfs create -o mountpoint=/cnvar -o sharenfs=root=@10.0.0.0/8 -o quota=20G -o reservation=10G zones/cnvar
zfs create -o mountpoint=/cnswap -o sharenfs=root=@10.0.0.0/8 -o quota=80G -o reservation=60G zones/cnswap
zfs create -o mountpoint=/cnwkspc -o sharenfs=root=@10.0.0.0/8 -o quota=80G -o reservation=60G zones/cnwkspc

# make sure nfs server serves ntp
#  SmartOS: check /etc/inet/ntp.conf, comment out line:
#    restrict default ignore
svcadm restart ntp



# Setup Compute Node OS template

# install ubuntu minimal into a VM as PXE os template
#  https://help.ubuntu.com/community/Installation/MinimalCD
# in template os, bring up a root terminal session to execute following commands by:
sudo -s
# after each reboot & login cycle, do it again for subsequent commands

# sudo vi /etc/default/grub
# change like the following line, to use kernel dhcp for networking
GRUB_CMDLINE_LINUX_DEFAULT="ip=::::::dhcp"

# run update-grub and reboot to take effect

# disable resolved & netplan
systemctl disable systemd-resolved
systemctl stop systemd-resolved
systemctl mask systemd-resolved

# disable network services
systemctl stop systemd-networkd.socket systemd-networkd networkd-dispatcher systemd-networkd-wait-online
systemctl disable systemd-networkd.socket systemd-networkd networkd-dispatcher systemd-networkd-wait-online
systemctl mask systemd-networkd.socket systemd-networkd networkd-dispatcher systemd-networkd-wait-online

apt -y purge nplan netplan.io

# install utilities
apt install git htop bmon nfs-common uuid curl

# configure time sync with nfs server
# change /etc/systemd/timesyncd.conf, uncomment NTP= and set to nfs server:
#   NTP=10.88.88.139

# recreate resolv.conf, it's symlink, must rm first
rm /etc/resolv.conf
cat << EOF > /etc/resolv.conf
domain nodes
nameserver 223.5.5.5
nameserver 119.29.29.29
EOF

# prevent NetworkManager from changing it
#  https://linoxide.com/how-tos/change-attributes-of-file/
chattr +i /etc/resolv.conf


# disable swap on root fs
swapoff -v /swap.img
vi /etc/fstab
# remove swap line
#
# use tmpfs for log
#  tmpfs /var/log  tmpfs defaults,size=512M  0 0
#
rm /swap.img

# cleanup log files and reboot
rm -rf /var/log/*
reboot

# upload os files to NAS as nfsroot

mkdir /run/cnroot /run/cnvar
mount -t nfs -o rw,vers=3,noacl,nolock 10.88.88.139:/cnroot /run/cnroot
mount -t nfs -o rw,vers=3,noacl,nolock 10.88.88.139:/cnvar /run/cnvar

cp -ax /. /run/cnroot/.
cp -ax /dev/. /run/cnroot/dev/.
cp -ax /var/. /run/cnvar/.

# remove junk dirs/files for nfsroot
rmdir /run/cnroot/lost+found
rm -rf /run/cnroot/tmp
rm -rf /run/cnroot/var
rm -rf /run/cnroot/etc/netplan/*
rm /run/cnroot/etc/hostname
rm -rf /run/cnvar/log
mkdir /run/cnvar/log

# recreate essential dirs/fies for nfsroot
mkdir /run/cnroot/tmp /run/cnroot/var /run/cnroot/cnswap
ln -s /run /run/cnroot/var/run
ln -s /run/lock /run/cnroot/var/lock

# do this on the NAS to recreate fstab for the nfsroot OS
# leave the template OS' /etc/fstab intact, or it won't be usable anymore
rm /cnroot/etc/fstab
vi /cnroot/etc/fstab
# add these lines
10.88.88.139:/cnroot  /         nfs     ro,vers=3,noacl,nolock  0 0
tmpfs                 /tmp      tmpfs   defaults,size=2G        0 0

# prepare netboot initramfs
cd /run/cnroot/boot
rm -rf config-* efi/ grub/
vi /etc/initramfs-tools/initramfs.conf
# change MODULES=most to MODULES=netboot
mkinitramfs -o /run/cnroot/boot/initrd.img-$(uname -r)
vi /etc/initramfs-tools/initramfs.conf
# change MODULES=netboot back to MODULES=most

# persistent netboot mode for initramfs on /run/cnroot
vi /run/cnroot/etc/initramfs-tools/initramfs.conf
# change MODULES=most to MODULES=netboot

ln -s vmlinuz-$(uname -r) kernel
ln -s initrd.img-$(uname -r) initrd


# upload system config to NAS:
scp -r cnswap/sbin root@10.88.88.139:/cnswap/
scp -r systemd/* root@10.88.88.139:/cnroot/etc/systemd/system/

# on NAS:
# prevent nfsroot/etc/resolv.conf from being changed by NetworkManager
cd /cnroot/etc
[root@smartos /cnroot/etc]# ls -l/c resolv.conf
-rw-r--r--   1 root     root          30 Mar  7 12:33 resolv.conf
    {A------m----}
[root@smartos /cnroot/etc]# chmod S+v{nounlink} resolv.conf 
[root@smartos /cnroot/etc]# chmod S+v{immutable} resolv.conf 
[root@smartos /cnroot/etc]# ls -l/c resolv.conf 
-rw-r--r--   1 root     root          59 Mar  7 13:00 resolv.conf
    {A-----im-u--}

# lift limits
cat << EOF > /cnroot/etc/security/limits.d/maxfiles.conf
* soft nofile 30000
* hard nofile 30000
EOF

cat << EOF > /cnroot/etc/sysctl.d/90-inotif_user_watches.conf
fs.inotify.max_user_watches = 30000
EOF


# boot a VM instance with /cnroot/boot/kernel and initrd, into single rescue mode
# cd /cnroot/boot
# pixiecore boot -d kernel initrd --cmdline "root=/dev/nfs nfsroot=10.88.88.139:/cnroot,ro,noacl ip=::::::dhcp single"

# mount root writable
mount -o remount,rw /

# disable services
systemctl disable apparmor
systemctl mask apparmor
systemctl disable grub-initrd-fallback
systemctl mask grub-initrd-fallback

# enable services
systemctl enable var.mount
systemctl enable var-log.mount
systemctl enable cnswap.mount
systemctl enable cnswap.service

poweroff

# now cnroot can be used to boot developer's compute node instances in readonly-nfsroot, normal mode
