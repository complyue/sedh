{##
 # This is the sentinel file stand in place of a host module that
 # should have been installed by the host interpreter, which contains
 # host procedures, classes and other artifacts defined via EHI
 # (which is obviously written in the host language i.e. Haskell)
 #
 # Execution of this module file is a sign showing that wrong Edh
 # interpreter is used to run the program.
 #}
if running!true # should be treated as false for proper control-flow analysis
then error( 'Missing host module: ' ++ __name__ )

# rest of the source here serves as meta documentation for aforementioned
# host artifacts, and is meant to be leveraged by IDE tools (such as els)
# with source code analysis capabilities, to aid the developers


# the Edh intepreter executable for hh/worker
jobExecutable :: path!String || [ cmdl!String ]
jobExecutable =: '/path/to/edh/interpreter'

# the working directory in which the job is initiated
jobWorkDir :: path!String
jobWorkDir =: '/path/to/cwd/of/hh'

# - in HH process:
#  the .edh file on command line of gwd, the work scheduler script
# - in worker process:
#  name of the work definition module
jobWorkSpec :: path!String
jobWorkSpec =: '/path/to/job/init/script or work/def/modu'

# os pid of forager process
swarmManagerPid :: pid!int!Decimal
swarmManagerPid =: 1231

# os pid of worker process
swarmWorkerPid :: pid!int!Decimal
swarmWorkerPid =: 1232

# os file descripter number for the socket connected to hh from worker
wscFd :: fd!int!Decimal
wscFd =: 15
