
{#
 # This is the sentinel file stand in place of a host module that
 # should have been installed by the host interpreter, which contains
 # host procedures, classes and other artifacts defined via EHI,
 # and obviously, written in the host language (i.e. Haskell)
 #
 # Execution of this module file is a sign showing that wrong Edh
 # interpreter is used to run the program.
 #}
error( 'Missing host module: ' ++ __name__ )


# artifacts should be in this host module are mocked-up below:

# the Edh intepreter executable for hh/worker
jobExecutable :: Either FilePath [ String ]
jobExecutable = '/path/to/edh/interpreter'

# the working directory in which the job is initiated
jobWorkDir :: FilePath
jobWorkDir = '/path/to/cwd/of/hh'

# - in hh process:
#  the .edh file (on command line of hh) initiated the job
# - in worker process:
#  name of the work definition module
jobWorkSpec :: FilePath
jobWorkSpec = '/path/to/job/init/script or work/def/modu'

# os pid of forager process
swarmManagerPid :: Int
swarmManagerPid = 1231

# os pid of worker process
swarmWorkerPid :: Int
swarmWorkerPid = 1232

# os file descripter number for the socket connected to hh from worker
wscFd :: Int
wscFd = 15
