import * 'net'
import * 'net/html'

import ( NodeReg, system, ** ) 'swarm/CTRL'

import * './debug'


export class SwarmController {

  {## a stack of Đ modules, overlaid in providing files as static web resources #}
  WEB_MODULES = (
    'swarm/cc/web', # from sedh
    'swarm/web', # from sedh
    'net/web', # from nedh
    'web', # from edh
  )

  {## extra routes per HttpServer (atop Snap) semantics #}
  URL_ROUTES = {}

  {## computing node configuration template
   # serving as default when a new unknown computing node attempts booting #}
  method cnodeCfgTmpl() { iexpr 'swarm/cc/cnode-cfg' }.deBlock


  # constructor
  method __init__(
    regDir= './etc',
    httpPort= 6780, httpInterface= '0.0.0.0',
    hbPort= 6768, hbInterface = '0.0.0.0',
  ) {

    {## Registry of all nodes #}
    this.nreg = NodeReg( that.cnodeCfgTmpl(), regDir= regDir, )

    {## Serving PixieApi, management page, and various browser-facing API endpoints over http #}
    this.http = HttpServer(
      that.WEB_MODULES,
      addr= httpInterface, port= httpPort,
      routes= {
        'reboot/:account': that.rebootApi,
        'pixie/v1/boot/:mac': that.pixieApi,
        'cnode/v1/save/:mac': that.cfgSaveApi,
        'cnode/v1/load/:mac': that.cfgLoadApi,
        'cnode/v1/eval/:mac': that.cfgEvalApi,
        'cnodes.csv': that.csvDownload,
      } =< that.URL_ROUTES,
      front= that.managementPage,
    )
    case this.http.addrs() of {
      { httpAddr :> _extraHttpAddrs } -> {
        console.info<| 'Swarm Control Center listening: http://'
        ++ httpAddr.host() ++ ':' ++ httpAddr.port()
      }
      error( 'Swarm Control Center failed start serving.' )
    }

    {## Computing node heartbeats sniffer #}
    this.hb = Sniffer(
      that.sniffHeartbeats,
      addr= hbInterface, port= hbPort,
    )
    case this.hb.addrs() of {
      { hbAddr :> _extraHttpAddrs } -> {
        console.info<| 'Swarm Control Center sniffing udp://'
        ++ hbAddr.host() ++ ':' ++ hbAddr.port() ++ ' for cnode heartbeating.'
      }
      error( 'Swarm Control Center failed heartbeat sniffing.' )
    }

  }

  method managementPage() {
    perform setContentType('text/html')
    effect {
      method @ht'write'payload(chunk) {
        perform writeText$ str$ chunk
      }
      knownNodes = this.nreg.knownNodes
    }
    runTag$ include './web/front'
  }

  method csvDownload() {
    effect knownNodes = this.nreg.knownNodes
    include './web/csv'
  }

  method cfgEvalApi() {
    perform setContentType$ "text/plain"
    rspValue = ''
    {
      let
      , ( mac, ** ) = perform rqParams
      , src = perform readSource()
      , ( attrs, ** ) = this.nreg.cfgOf(mac)
      , rspValue = attrs.eval$ parseEdh$ src
    } $=> { exc } -> {
      perform setResponseCode(500)
      rspValue = exc
    } @=> {
      perform writeText$ str$ rspValue
    }
  }

  method cfgLoadApi() {
    perform setContentType$ "text/json"
    rspJson = {}
    {
      let
      , ( mac, ** ) = perform rqParams
      , ( src, ** ) = this.nreg.cfgOf(mac)
      rspJson['src'] = src
    } $=> { exc } -> {
      rspJson['err'] = desc(exc)
    } @=> {
      perform writeText$ json$ rspJson
    }
  }

  method cfgSaveApi() {
    perform setContentType$ "text/json"
    rspJson = {}
    {
      let
      , ( mac, ** ) = perform rqParams
      , ( src, ** ) = this.nreg.cfgOf(mac)
      , reqJson = perform readCommand()
      case reqJson['preEdit'] of { preEdit }
      | not null(preEdit) && preEdit is not src -> {
        rspJson['err'] = 'Config file has changed!'
      }
      this.nreg.saveCfgSrc(mac, reqJson['afterEdit'])
    } $=> { exc } -> {
      rspJson['err'] = desc(exc)
    } @=> {
      perform writeText$ json$ rspJson
    }
  }

  method pixieApi() {
    let ( mac, ** ) = perform rqParams
    let ( boot, ** ) = this.nreg.cfgOf(mac)
    null(boot) -> { # this node configured to be not bootable
      perform setResponseCode(404)
    }
    assert$@ type(boot) is 'Blob' $@ (
      # `boot` should already be the utf8 payload as for pixie json response
      'bug: cnode cfg for ['++ mac ++'] supplied boot data of '
      ++ type(boot) ++' type instead of Blob'
    )
    perform setContentType$ "text/json"
    perform writeBS$ boot
  }

  method rebootApi() {
    perform setContentType('text/plain')
    let ( account, ** ) = perform rqParams
    case system(
      "ssh -o StrictHostKeyChecking=no " ++ account ++ " 'sudo reboot'"
    ) of {
      { errCode } -> {
        # destined to err out as the ssh connection will be forcefully disconnected immediately,
        # don't report the error for now, to figure out some better handling later.
        # perform setResponseCode(500)
        perform writeText$ "Reboot cmd exited with: " ++ errCode
      }
      perform writeText$ "ok"
    }
  }

  # this method is run by Sniffer as a separate, dedicated Đ program
  method sniffHeartbeats() {
    defer console.info<| 'Swarm Control Center done sniffing heartbeats.'

    # make all exported methods available to incoming commands
    # (no effect by far, only json payload incoming, and no method actually exported)
    from that import * into perform svcScope

    # loop forever until eol on error, or stopped explicitly
    while perform eol() is false {@

      # expect json payload broadcasted periodically from booted computing nodes
      case perform sniff() of { hbd } | type(hbd) is 'Dict' -> {
        case hbd['mac'] of {
          { mac } | type(mac) is 'String' -> pass
          console.warn<| 'Unexpected heartbeat payload:\n' ++ hbd
          continue
        }
        case hbd['heartbeat'] of {
          { hb'attrs } | type(hb'attrs) is 'Dict' -> pass
          console.warn<| 'Unexpected heartbeat payload:\n' ++ hbd
          continue
        }

        let ( attrs, ** ) = this.nreg.cfgOf(mac)
        {## it's a sandboxed scope, meant to be updated by heartbeats from the booted node #}
        attrs =: scope()
        attrs.put(**hb'attrs)
      }

    @} $=> { exc } -> {
      console.error<| 'Error sniffing heartbeats: ' ++ desc( exc )
    }
  }


  method join() {
    this.http.join()
  }

  method stop() {
    this.hb.stop()
    this.http.stop()
  }

}
