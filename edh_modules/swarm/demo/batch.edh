#
# Demonstrate a simple, batch based, parallel work definition,
# for a swarm to compute.
#

# re-export swarm symbols so entry modules can simply do
#  `import * '.'`
export import * 'swarm'


# this computation procedure is put here for simplicity of
# demonstration, many of such procedures should be imported
# from modular libraries instead, likely with unique symbols
# provided by those libraries to avoid naming clash.
method computeIt( z ) {
  # expecting an effectful value identified by attribute
  # name `c` on call stack
  r = perform c * z

  return r
}


# (hyper) parameters and their default values to be worked on

# import parameters from a module serving edit-to-config purpose
import * './etc'

# more parameters with their default values
let ( m, n ) = ( 3, 7 )

{#
 # this is the job entry for each one particular ips (instantiated
 # parameter set) to be worked out by a swarm worker process
 #
 # such a procedure usually uses a wild arguments receiver, so
 # arbitrary parameters can be overridden, with defaults from the
 # module scope out here.
 #}
export method @doOneJob * {
  # put c into effect namespace and call an effectful computation
  # procedure expecting it.
  #
  # this is not obvious a right move if `computeIt` is tightly
  # coupled with this package, please imagine some `computeIt`
  # is actually imported from other modular libraries/frameworks.
  #
  # in large scale modular libraries/frameworks, they should further
  # define their own symbols used to identify the expected effects,
  # instead of the alphanumeric name `c` as demonstrated here.
  effect c = m + n
  case computeIt( m * n ) of { r } -> { pass }

  # simulate computation time cost, each taking 3 seconds.
  # for ts from console.everySeconds( 3 ) do break
  # or no artificial delay
  ts = console.now()

  # prepare the result to be returned
  result = (
    r=r, ts=ts,
  )

  console.debug<| 'Returning result ' ++ result
  # return result of the job
  return {} =< result
}


{#
 # this is supposed to be the reused entry function, instantiation
 # paremeter sets are generated synchronously by a generator
 # procedure, then results are just printed as they come back.
 #
 # see: manageBatchJobs() from 'swarm/work/batch' for how the job
 # scheduling is done
 #
 # see: what effectful configs/callbacks are performed from
 # 'swarm/headhunter' for swarm/work tuning options
 #
 #}
export method manageThisWork * {

  # the enclosing module here is the work definition module
  effect @workDefinition = this.__name__

  # log and retry on job failure
  effect method @shouldRetryJob ( jobExc, ips ) {
    console.error<| 'Job failed: ' ++ jobExc
    return ips # retry the same ips
    # a different ips can be returned from here to retry
  }

  generator iterParams() {
    for m from m_range() do
    for n from n_range() do
    not exclude( m, n ) -> {
      yield {} =<( m=m, n=n, )
    }
  }

  for ( ips, result ) from manageBatchJobs( iterParams ) do {
    console.print( 'Job computed.', ips=ips, result=result, )
  }

  console.print( 'All done.' )
}
