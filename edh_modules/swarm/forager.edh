
{#
 # forager for a swarm node
 #}

import * 'net'

# will use classes there, but not to re-rexport them
import * './forager/mgmt'


export method forageOn (
  headcount = 1, # number of worker processes to vend
  targetPrefix = '', # prefix to filter out uninteresting work
  swarmAddr = '0.0.0.0', # local addr to sniff for call-for-workers
  swarmPort = 3722, # local port to sniff for call-for-workers
) {

  # the forager instance
  forager = Forager( headcount )

  let sniffer = Sniffer( addr= swarmAddr, port= swarmPort, ) $@ () => {

    # start the forager's scheduling work
    go forager.scheduleTeams()

    # re-export (as to expose) forager's reacting (exported) methods there, as to be callable by sniffed commands
    from forager import * into perform svcScope

    # impl. work filtering
    effect method ignoreWorkModu( workModu ) case workModu of {
      { targetPrefix >@ _ } -> false
      _ -> true
    }

    # loop forever until eol on error, or stopped elsewhere
    while perform eol() is false {

      # note nil result from `sniff()` is very much expected, and is silently ignored
      case perform sniff() of { cmdVal } -> {
        console.info<| 'Unexpected cmd result:\n  ' ++ cmdVal
      }

    } $=> { exc } -> {
      console.error<| 'Error sniffing: ' ++ desc( exc )
    }

  }

  case sniffer.addrs() of {
    { addr :>_ } -> console.info<| 'Foraging at: ' ++ addr
    # or the network has failed, propagate the error
    sniffer.join() # this usually throws
    # in case join() didn't throw, report this error
    error( 'Forager failed sniffing.' )
  }

  return sniffer
}
