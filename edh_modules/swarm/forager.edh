
{#
 # forager for a swarm node
 #}

import * 'net'

# will use classes there, but not to re-rexport them
import * 'swarm/forager/mgmt'


export method forageOn (
  headcount = 1, # number of worker processes to vend
  targetPrefix = '', # prefix to filter out uninteresting work
  swarmAddr = '0.0.0.0', # local addr to sniff for call-for-workers
  swarmPort = 3722, # local port to sniff for call-for-workers
  foragerModu = 'swarm/forager', # the forager reacting module
) {
  method __init_forager__() {
    that.forager = Forager( headcount )
    that.targetPrefix = targetPrefix
  }

  case Sniffer(
    # sniffer module
    foragerModu,
    # addr/port to sniff on
    swarmAddr, swarmPort,
    # sniffer module initializer
    init = __init_forager__,
  ) of { sniffer } -> { pass }

  case sniffer.addrs() of {
    { addr =>_ } -> console.info<| 'Foraging at: ' ++ addr
    # or the network has failed, propagate the error
    sniffer.join() # this usually throws
    # in case join() didn't throw, report this error
    error( 'Forager failed sniffing.' )
  }

  return sniffer
}
