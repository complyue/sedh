
# this is the network facing entry module, specifiying
# reactions by exposing procedures, to host command packets
# casted (broadcast, multicast, unicast) to the address a
# sniffer is configured to sniff

import (Addr, **_) 'net'

# procedures responding to call-for-workers are defined there
import * './mgmt'


# source address of the sniffed command packet, updated each
# time a packet is sniffed and executed as command
addr := Addr()


# configured prefix to filter out uninteresting worksources
# this is normally implanted by host module initialization
targetPrefix ?:= ''

# the managing forager instance
# this is normally implanted by host module initialization
forager ?:= Forager()


# expose its reacting (exported) methods here, to be callable
# by sniffed commands
import * forager


# start the forager's scheduling work
go forager.scheduleTeams()


# mocking artifacts those should have been implanted by host
# module preparation, to give meaningful information to IDEs
# and/or other tools, for purpose of, e.g. code completion.
false -> {  # this block is impossible to run

  # sniff another command from the network
  method sniff() { pass }

  # check end-of-life of the sniffer
  method eol() return true

}


# loop forever until eol on error, or stopped elsewhere
while false == eol() {

  # note nil result from `sniff()` is very much expected,
  # and is silently ignored
  case sniff() of { cmdVal } -> {
    console.info<| 'Unexpected cmd result:\n  ' ++ cmdVal
  }

} $=> { exc } -> {
  console.error<| 'Error sniffing: ' ++ exc
}
