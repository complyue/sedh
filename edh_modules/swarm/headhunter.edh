
import * 'math'

import * 'net'

import * 'swarm/RT'

import * './debug'
import * './symbols'

# work definition scripts are allowed to change the inferred configuration at
# 'swarm/ENV', import the module as a reference, to get/set effective artifacts
# living there
senv = import _ 'swarm/ENV'


export class HeadHunter {

  class Forager {
    method __init__( peer as this.peer, pid as this.pid ) {
      this.hcEmployed = 0
      this.hcWorking = 0
    }
  }

  data Worker( peer: Peer, pid, manager ) {
    method __init__(***) {
      this.peer.armChannel( dataChan )
      ech = this.peer.armChannel( errChan )
      # convert disconnection without result to error
      go {
        discExc = None
        this.peer.join() $=> {
          { discExc } -> pass
        }
        ech <- discExc or PeerError( 'Swarm worker disconnected' )
      }
    }

    method __repr__() {
      '<Worker pid=' ++ this.pid ++ ' via ' ++ this.peer.ident ++ '>'
    }
  }

  # a swarm node connection identifying itself as a forager
  export method OfferHeads( foragerPid, maxHC, ) void {
    peer = perform @netPeer
    peer =: Peer()

    ai { # calculate number of employment atomically
      hcDemand = this.headcount - this.hcEmployed
      hcToEmploy = min( maxHC, hcDemand )
    }
    hcToEmploy < 1 -> { # no demand, disconnect
      # todo send zero employment ?
      peer.stop()
    }

    # employ heads from this forager
    ai case this.foragers[ peer ] of {
      nil -> {
        forager = Forager( peer, foragerPid, )
        this.foragers[ peer ] = forager
      }
      { forager } -> { # just prototype it for IntelliSense
        forager =: Forager()
      }
    }
    forager.hcEmployed += hcToEmploy
    console.debug<| 'HH is hiring ' ++ forager.hcEmployed ++ ' heads from '
    ++ peer.ident ++ ' now.'
    peer.p2c( dataChan, repr( forager.hcEmployed ) )
  }

  # a swarm node connection identifying itself as a worker
  export method StartWorking( workerPid, foragerPid, ) void {
    peer = perform @netPeer
    peer =: Peer()

    console.debug<| 'Worker process pid=' ++ workerPid ++ ' managed by '
    ++ foragerPid ++ ' via ' ++ peer.ident ++ ' start working.'
    worker = Worker( peer, workerPid, foragerPid )
    this.idleWorkers.push( worker )
    this.workerAvailable.inc()
  }

  method __init__( resultCh as this.resultCh = chan ) {
    # fetch effective configurations, cache as instance attribute
    this.priority = perform priority
    this.headcount = perform headcount
    this.workModu = perform @workDefinition

    # total heads employed by this HH
    this.hcEmployed = 0
    # data structures for job scheduling
    this.foragers = {}
    this.workerAvailable = Semaphore() # inventory of newly available workers
    this.idleWorkers = [] # FILO queue
    this.pendingJobs = [] # FILO queue
    this.pendingCntr = Semaphore() # increased/decreased on job submit/result/err
    this.finishingUp = Semaphore() # filled once no more jobs, i.e. to start finishing up
    this.allReceived = Semaphore() # filled once all results received

    go {
      effect default swarmIface = '0.0.0.0'
      let server = Server(
        addr= perform swarmIface, # local addr to bind
        port= 0, # local port to bind
        useSandbox= false, # trade security mitigation for simplicity
      ) $@ () => {
        import * that

        peer = perform @netPeer
        peer =: Peer()
        console.debug<| 'Swarm forager/worker connected - ' ++ peer
        defer {
          console.debug<| 'Disconnecting swarm forager/worker ' ++ peer
        }

        {

          while peer.eol() is false case peer.readCommand() of {@
            # sequence of commands each resulting in nil are expected and let pass here
            { cmdVal } -> {
              console.warn<| 'Unexpected cmd from ' ++peer++ '\n  ' ++cmdVal
            }
          @}

        } @=> { exc } -> {
          console.warn<| 'Exception by swarm forager/worker ' ++ peer
          ++ ' error: ' ++ exc
        }

      }
      server =: Server()
      case server.addrs() of {
        { wsAddr :>_ } -> console.info<| 'HeadHunter listening: ' ++ wsAddr
        # or the network has failed, propagate the error
        server.join() # this usually throws
        # in case join() didn't throw, report this error
        error( 'HeadHunter failed listening.' )
      }

      # call-for-workers advertiser
      cfw = Advertiser(
        # target swarm address
        perform swarmAddr $=> '127.0.0.1', perform swarmPort $=> 3722,
        # announce call-for-workers from our worksource addr
        fromAddr=wsAddr,
      )

      # advertise call-for-workers when there's demand
      for _ from console.everySeconds(
        perform cfwInterval $=> 3, # use effectful config
        wait1st=false, # announce the first CFW immediately
      ) do {
        # check if all have finished
        do break if this.allFinished()

        # calibrate this.hcEmployed, wrt forager disconnection etc.
        hcEmployed = 0
        do case peer.eol() of {
          false -> hcEmployed += forager.hcEmployed
          this.foragers[ peer ] = nil # forget about it
        } for@ ( peer: Peer, forager: Forager ) from this.foragers
        if this.hcEmployed != hcEmployed then {
          console.debug<| 'HH has ' ++ hcEmployed ++ ' heads employed now.'
          this.hcEmployed = hcEmployed
        }

        hcDemand = this.headcount - hcEmployed
        if hcDemand > 0 then {
          console.debug<| 'Calling ' ++ hcDemand ++ ' workers from ' ++ cfw.addrs()
          cfw.post( expr

            WorkToDo(
              {$ hcDemand $},
              {$ senv.jobExecutable $},
              {$ senv.jobWorkDir $},
              {$ this.workModu $},
              {$ this.priority $},
            )

          )
        }
      }
    }
  }

  method allFinished() {
    if this.resultCh.eos then return true

    if this.finishingUp and null(this.pendingCntr) and null(this.pendingJobs) then {
      this.allReceived.put(1)
      this.resultCh <- nil
      return true
    }

    return false
  }

  method trackJob( worker: Worker, ips ) {
    # perform retry effect on error
    perceive worker.peer.armedChannel( errChan ) { jobExc } -> {
      worker.peer.stop() # disconnect this worker anyway on error

      # call the effectful failure callback
      case perform @shouldRetryJob of {
        false -> pass
        true -> this.pendingJobs.push( ips )
        { retryChk } -> case retryChk( jobExc, ips ) of { newIPS } -> {
          this.pendingJobs.push( newIPS )
        }
      }

      # failed to get a result, but we know it's not pending now
      this.pendingCntr.dec()

      break # terminate this thread
    }

    # submit ips and receive result then forward to global result channel
    worker.peer.p2c( dataChan, repr( ips ) )
    let result = <- worker.peer.armedChannel( dataChan )
    this.resultCh <- ( ips, result )
    this.pendingCntr.dec()
    this.idleWorkers.push( worker )
    this.workerAvailable.inc()
  }

  method submitJobs() while true {
    ips = this.pendingJobs.pop()
    if ips is None then return nil # no more pending jobs
    this.pendingCntr.inc()

    while true {
      # try grab a present idle worker and assign it this job
      worker = this.idleWorkers.pop()
      if worker then {
        console.debug<| 'Job assigned to ' ++ worker ++ ' - ' ++ ips
        # start asynchronous concurrency
        go trackJob( worker, ips )
        break # this job settled, proceed to next job
      }

      # no immediate idle worker, need to wait
      console.debug<| 'Wait for idle workers.'
      # wait until new idle workers appear
      while null(this.idleWorkers) this.workerAvailable.waitAny()
      console.debug<| 'Got idle workers.'
    }
  }

  method dispatchJob( ips ) {
    this.pendingJobs.push( ips )
    this.submitJobs()
  }

  method finishUp() {
    this.finishingUp.put(1)
    this.allReceived.wait(0)
  }

}
