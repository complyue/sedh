
# this is the worksource facing entry module of an Edh swarm forager

import * 'net/symbols'
effect import * 'net/effects'

import ( Peer, **_ ) 'net/RT'

# work definition scripts are allowed to change the inferred
# configuration at 'swarm/ENV', import it as a namespace to
# always use up-to-date artifacts living there
case { import (**_ ) 'swarm/ENV' } of { senv } -> { pass }

import * 'swarm/forager/mgmt'


# this should have been implanted by per-connection peer module initialization
wsc ?:= WSC()
# expose reacting procedures exported from the wsc object
import * wsc


# this should have been implanted by per-connection peer module preparation
peer ?:= Peer()
console.debug<| 'Swarm forager negotiating with worksource - ' ++ peer


effect {
  ; @netPeer = peer
  ; @dataSink = peer.armChannel( dataChan ?:= 'data' )
}


producer offerHeads( outlet ) {
  peer.postCommand( expr

    OfferHeads( {$ senv.swarmManagerPid $}, {$ wsc.hcReserved $} )

  )
}
offerHeads( outlet=peer.armChannel( dataChan, wsc.hcEmployed ) )
# start the team keeper, it'll subscribe to wsc.hcEmployed, thus
# trigger the offerHeads() producer
go wsc.teamKeeper()


{

  while peer.eol() is false case peer.readCommand() of {
    # note a command resulting in nil is ignored here
    { cmdVal } -> {
      console.warn<| 'Unexpected cmd from ' ++ peer ++ '\n  ' ++ cmdVal
      cmdVal = nil # clear it
    }
  }

} @=> {
  { exc } -> {
    console.error<| 'Disconnected with worksource ' ++ peer
    ++ ' for error: ' ++ exc
  }
  console.debug<| 'Disconnected with worksource ' ++ peer
}
