#
# Swarm batch worker process entry module
#

import * 'net'

import * 'swarm/symbols'
import * 'swarm/compat'
import * 'swarm/RT'

# work definition scripts are allowed to change the inferred configuration at
# 'swarm/ENV', import the module as a reference, to get/set effective artifacts
# living there
senv = { import _ 'swarm/ENV' }


# take the worksource connection file describer, make it a peer for comm
peer = wscTake( senv.wscFd )
console.debug<| 'Took worker connection to worksource: ' ++ peer
defer {
  console.debug<| 'Disconnecting worker for worksource ' ++ peer
}

jobSink = peer.armChannel( dataChan )

effect {
  ; @netPeer = peer
  ; @dataSink = jobSink
}


# in a worker process, @senv.jobWorkSpec@ is the work definition module
workDefinition = senv.jobWorkSpec
# import work related artifacts, especially `@doOneJob` from there
import * workDefinition


# apks are expected to be posted to a worker's data channel, one by one
go for ips from ( outlet=jobSink ) | () =>* {
  # identify this connection as swarm worker to the headhunter, then it will
  # start sending ips to our data channel
  peer.postCommand( expr

    StartWorking( {$ senv.swarmWorkerPid $}, {$ senv.swarmManagerPid $} )

  )
  console.debug<| 'Started working for worksource ' ++ peer
} do {
  console.debug<| 'Computing ips: ' ++ ips

  case @doOneJob(** ips ) of {
    { result } -> {
      console.debug<| 'Computed result ' ++ result ++ ' for ips: ' ++ ips
      peer.p2c( dataChan, repr( result ) )
    }
    # in case it returned nil
    throw UsageError( 'Swarm job returned no result', ips=ips )
  } $=> { jobExc } -> {
    console.error<| 'Swarm job [' ++ workDefinition ++ ' - '
    ++ senv.swarmManagerPid ++ '>' ++ senv.swarmWorkerPid ++ '] failure:\n'
    ++ jobExc
    peer.p2c( errChan, desc( jobExc ) )
    break # stop processing more jobs
  }

}


{

  while peer.eol() is false case peer.readCommand() of {
    # sequence of commands each resulting in nil are expected and let pass here
    { cmdVal } -> {
      console.warn<| 'Unexpected cmd from ' ++ peer ++ '\n  ' ++ cmdVal
      cmdVal = nil # clear it
    }
  }

} @=> { exc } -> {
  console.error<| 'Exception by worker for worksource ' ++ peer
  ++ ' error: ' ++ exc
}
