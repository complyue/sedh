#
# Swarm batch worker process entry module
#

import * 'net'
import * 'swarm/symbols'

import (
  jobWorkModu, swarmManagerPid, swarmWorkerPid,
  wscFd, wscTake,
**_) 'swarm/RT'


# take the worksource connection file describer, make it a peer for comm
peer = wscTake(wscFd, Peer())


# inherit the work module, so we have access to `@doOneJob` implemented there
extends {
  import (**_) jobWorkModu
}


# identify this connection as swarm worker to the headhunter, then it will
# start sending ips to our data channel
producer initiateJobs(outlet) {
  peer.postCommand(expr

StartWorking({$ swarmWorkerPid $}, {$ swarmManagerPid $})

  )
}

for ips from initiateJobs( outlet=peer.armChannel(dataChan) )
# apks are expected to be posted to a worker's data channel, one by one
do case this.@doOneJob(***ips) of {
  { result } -> {
    peer.p2c(dataChan, repr(result))
  }
  throw UsageError('Swarm job returned no result', ips=ips)
} $=> { jobExc } -> {
  console.error<| 'Swarm job [' ++ jobWorkModu ++ ' - [' 
    ++ swarmManagerPid ++ '/' ++ swarmWorkerPid, '] failure:\n'
    ++ jobExc
  peer.p2c(errChan, repr(jobExc))
  break
}
